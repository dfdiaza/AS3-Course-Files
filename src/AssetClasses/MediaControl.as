package src.AssetClasses{	import fl.video.FLVPlayback;		import flash.display.AVM1Movie;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.StatusEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.net.LocalConnection;	import flash.text.TextField;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;		import src.CourseModel;	import src.MediaControllerView;	import src.Model;	import src.classes.InfoPanel;	import src.com.Buttons;	import src.com.Preloading;	import src.com.Presentation;	import src.pages.DynamicPageAPI;
		public class MediaControl extends MovieClip//Because this controller is tied to a movie clip (media_player.as) it doesn't subclass Controller.	{		public var rewind_mc:Buttons;		public var play_mc:Buttons;		public var scrubber_mc:MovieClip;		public var outline_mc:MovieClip;			public var loader_mc:MovieClip;		public var counter_txt:TextField;				private var _infoPanel:InfoPanel;		private var _model:CourseModel;		private var _mediaContainer:*;		private var _presentation:Presentation;		private var _captivatePg:Boolean;		private var _mediaPath:String;		private var _imagePath:String;		private var _autoPlay:Boolean;		private var _loader:Loader;		private var _ptype:String;		private var _audioPage:Boolean = false;		private var _videoPage:Boolean = false;		private var _swfPage:Boolean = false;		private var _loadContent:DisplayObject;		private var _preload:Preloading;		private var _fps:Number = 24;		private var _seekTime:int; 					//used for seeking video		private var _vidcnt:int = 0;				//Counter for scrubbing videos so it only updates about once a second.		private var _setLoc:Number;					//Location to set media after scrubbing.		private var _captivateTimer:Timer;			//Timer used to restart captivate movie after scrubbing		private var _mediaEnded:Boolean = false;	//Used so play button will rewind when media is at the end.		private var _loopCnt:int = 0;				//Used to determine if SWF media has completed or is looping.		private var as2LC:LocalConnection;			//Local Connection object for controlling AS2 movies.		private var as2LCSend:LocalConnection;		//Local Connection for sending commands.		private var _as2FrameTot:Number;			//Total Number of frames for AS2 files.		private var _as2Cnt:int;					//Used to lesson frequent updates during scrubbing of AS2 files.				public function MediaControl():void		{			_captivateTimer = new Timer(200);		}				public function setUpButtons():void		{			scrubber_mc.x = outline_mc.x;			scrubber_mc.buttonMode = true;			play_mc.stateCode = _model.playState;			play_mc.addEventListener(MouseEvent.CLICK,playPauseMedia);			rewind_mc.addEventListener(MouseEvent.CLICK,rewindMedia);			scrubber_mc.addEventListener(MouseEvent.MOUSE_DOWN,startScrubbing);			scrubber_mc.addEventListener(MouseEvent.MOUSE_UP,stopScrubbing);		}				public function setUpLocalConnection():void		{			as2LC = new LocalConnection();			//Activate Local Connection			as2LC.client = this;						as2LCSend = new LocalConnection();			as2LCSend.addEventListener(StatusEvent.STATUS,onLCStatus, false, 0, true);		}				//LocalConnection Functions		//Used for updating controller for AS2 movies. CAlled from LocalConnection in ri_as2_loader movie		public function receiveFrame(fn:Number,ft:Number):void		{			//trace("frame number: " + fn);			//trace("total: " + ft);			_as2FrameTot = ft;			//Determine Time and Scrubber position for each Media type.			var curTime:Number = 1;			var totTime:Number = 1;			var perc:Number = 0;			var mediaEnded:Boolean = false;						if (fn >= ft) mediaEnded = true;			totTime = Math.floor(ft/_fps);			curTime = Math.floor(fn/_fps);			perc = fn/ft;						if (curTime > totTime) curTime = totTime;			updateTime(curTime,totTime);			updateScrubber(perc);			//trace(mediaEnded + " - " + _model.playState);			if (mediaEnded && _model.playState == "play")			{				//stopContent(); //This will keep a move from cycling. Is that OK?				_model.playState = "pause";				updatePlayPauseButton()				_mediaEnded = true;			}		}		//End LocalConnection Functions				public function playPauseMedia(e:MouseEvent):void		{			//trace("play pause media");			if (_model.playState == "pause")			{				if (_mediaEnded)				{					rewindMedia();				} else {					playContent();				}			} else if (_model.playState == "play") {				pauseContent();			}		}				public function rewindMedia(e:MouseEvent = null):void		{						_model.playState = "play";			_mediaEnded = false;			if (_model.pageAttributes.isAS2Movie)			{				//AS2MOVIE: Send a local connection command to pause.				as2LCSend.send(_model.connectStringAS2,"rewindMovie");			} else if (_captivatePg) {				_mediaContainer.rdcmndRewindAndPlay = 1;			} else if (_audioPage) { 							} else if (_videoPage) {				//var vidURL:String = FLVPlayback(_mediaContainer).source;				//trace("URL: " + vidURL);				FLVPlayback(_mediaContainer).seek(0);				FLVPlayback(_mediaContainer).play();			} else if (_swfPage) {							} else {				if (!(_mediaContainer is AVM1Movie))//Must be AVM2Movie for this code to work				{					_mediaContainer.gotoAndStop(1);					playMovieClipAndChildren(_mediaContainer);				}			}		}				public function updatePlayPauseButton():void		{			play_mc.stateCode = _model.playState;			if (play_mc.hitTestPoint(play_mc.stage.mouseX, play_mc.stage.mouseY, true))		    {		    	play_mc.onMouseUp();		    } else {		    	play_mc.onRollOut();		    }		}				private function pauseContent():void		{			_model.playState = "pause";			if (_model.pageAttributes.isAS2Movie)			{				//AS2MOVIE: Send a local connection command to pause.				as2LCSend.send(_model.connectStringAS2,"pauseMovie");							} else if (!(_mediaContainer is AVM1Movie)) { 				if (_captivatePg)				{					_mediaContainer.rdcmndPause = 1;				} else if (_audioPage) { 									} else if (_videoPage) {					FLVPlayback(_mediaContainer).pause();				} else if (_swfPage) {									} else {					stopMovieClipAndChildren(_mediaContainer);				}			}		}				public function stopContent():void		{			if (_model.pageAttributes.isAS2Movie) {				_model.playState = "pause";				if (_model.connectStringAS2 != null) as2LCSend.send(_model.connectStringAS2,"pauseMovie");			} else if (_mediaContainer && !(_mediaContainer is AVM1Movie)) {				_model.playState = "pause";				if (_model.pageAttributes.isAS2Movie) {					//AS2MOVIE: Send a local connection command to pause.					if (_model.connectStringAS2 != null)						as2LCSend.send(_model.connectStringAS2,"pauseMovie");				} else if (_captivatePg) {					_mediaContainer.rdcmndPause = 1;				} else if (_audioPage) { 									} else if (_videoPage) {					FLVPlayback(_mediaContainer).stop();				} else if (_swfPage) {									} else {					if (!(_mediaContainer is AVM1Movie))//Must be AVM2Movie for this code to work					{						stopMovieClipAndChildren(_mediaContainer);					}				}			}		}				//If a SWF has embedded movie clips may need to stop all childres in order to stop SWF.		private function stopMovieClipAndChildren(content:DisplayObjectContainer):void		{		    		    if (content is MovieClip)		    {		    	(content as MovieClip).stop();		    }		        		    if (content.numChildren)		    {		        var child:DisplayObjectContainer;		        var n:int = content.numChildren;		        for (var i:int = 0; i < n; i++)		        {		            if (content.getChildAt(i) is DisplayObjectContainer)		            {		                child = content.getChildAt(i) as DisplayObjectContainer;		                if (child.numChildren)		                    stopMovieClipAndChildren(child);		                else if (child is MovieClip)		                    (child as MovieClip).stop();		            }		        }		    }		}				//If SWF has child movie clips may need to start all in order to play SWF.		private function playMovieClipAndChildren(content:DisplayObjectContainer):void		{		    if (content is MovieClip)		    {		        var movieClip:MovieClip = content as MovieClip;		        if (movieClip.currentFrame < movieClip.totalFrames) // if the main timeline has reached the end, don't play it		            movieClip.play();		    }		    if (content.numChildren)		    {		        var child:DisplayObjectContainer;		        var n:int = content.numChildren;		        for (var i:int = 0; i < n; i++)		        {		            if (content.getChildAt(i) is DisplayObjectContainer)		            {		                child = content.getChildAt(i) as DisplayObjectContainer;		                if (child.numChildren)		                    playMovieClipAndChildren(child);		                else if (child is MovieClip)		                {		                    var childMovieClip:MovieClip = child as MovieClip;		                    if (childMovieClip.currentFrame < childMovieClip.totalFrames)		                        childMovieClip.play();		                }		            }		        }		    }		}				private function playContent():void		{			_model.playState = "play";			if (_model.pageAttributes.isAS2Movie) {				as2LCSend.send(_model.connectStringAS2,"playMovie");			} else if (_captivatePg) {				_mediaContainer.rdcmndResume = 1;			} else if (_audioPage) { 							} else if (_videoPage) {				FLVPlayback(_mediaContainer).play();			} else if (_swfPage) {							} else {				if (!(_mediaContainer is AVM1Movie))//Must be AVM2Movie for this code to work				{					playMovieClipAndChildren(_mediaContainer);				}			}		}				private function startScrubbing(e:MouseEvent):void		{			stopContent();			if (_model.pageAttributes.isAS2Movie) {				//AS2 SCRUBBING				//****************				as2LCSend.send(_model.connectStringAS2,"stopEnterFrame");			}			scrubber_mc.stage.addEventListener(MouseEvent.MOUSE_UP,stopScrubbing);//This is so we can capture a release outside event.			var rect:Rectangle = new Rectangle(outline_mc.x,scrubber_mc.y,outline_mc.width,0);			_presentation.removeEventListener(Event.ENTER_FRAME,updateController);			_presentation.addEventListener(Event.ENTER_FRAME,updateScrubbing);			e.target.startDrag(true,rect)		}				private function stopScrubbing(e:MouseEvent):void		{			scrubber_mc.stopDrag();			scrubber_mc.stage.removeEventListener(MouseEvent.MOUSE_UP,stopScrubbing);			_presentation.removeEventListener(Event.ENTER_FRAME,updateScrubbing);			_presentation.addEventListener(Event.ENTER_FRAME,updateController);			if (_model.pageAttributes.isAS2Movie) {				//AS2 SCRUBBING				//****************				trace("release");				as2LCSend.send(_model.connectStringAS2,"startEnterFrame");			} else if (_videoPage) {				FLVPlayback(_mediaContainer).seek(_seekTime);			} else if (_captivatePg) {				//if (setFrame <= 0) {					//setFrame = 1;				//}				_mediaContainer.rdcmndGotoFrame = _setLoc;				_mediaContainer.rdinfoCurrentFrame = _setLoc;				_captivateTimer.addEventListener(TimerEvent.TIMER,startCaptivate);				_captivateTimer.start();			}			playContent();		}				private function startCaptivate(e:TimerEvent):void		{			_mediaContainer.rdcmndResume = 1;		}				private function updateScrubbing(e:Event):void		{			var curTime:Number = 1;			var totTime:Number = 1;			var totAmt:Number;			var startFrame:Number = outline_mc.x;			var loaderwidth:Number = outline_mc.width;						if (_model.pageAttributes.isAS2Movie) {				//AS2 SCRUBBING				//****************				totAmt = _as2FrameTot;			} else if (_captivatePg)			{				totAmt = _mediaContainer.rdinfoFrameCount;			} else if (_audioPage) { 							} else if (_videoPage) {				totAmt = FLVPlayback(_mediaContainer).totalTime;			} else if (_swfPage) {							} else {				totAmt = _mediaContainer.totalFrames;			}						_setLoc = Math.floor(((scrubber_mc.x - startFrame)/loaderwidth)*totAmt);			if (_setLoc <= 0) _setLoc = 1;						if (_model.pageAttributes.isAS2Movie) {				//AS2 SCRUBBING				//****************				if (_as2Cnt >= 6)				{					_as2Cnt = 0;					as2LCSend.send(_model.connectStringAS2,"positionMovie",_setLoc);				}				_as2Cnt++;				totTime = Math.floor(totAmt/_fps);				curTime = Math.floor(_setLoc/_fps);			} else if (_captivatePg) {				_mediaContainer.rdcmndGotoFrame = _setLoc;				totTime = Math.floor(totAmt/_fps);				curTime = Math.floor(_setLoc/_fps);			} else if (_audioPage) { 							} else if (_videoPage) {				_seekTime = _setLoc;				if (_vidcnt >= 12)//Only seek video once every 12 frames.				{					_vidcnt = 0;					FLVPlayback(_mediaContainer).seek(_setLoc);				}				_vidcnt++;				totTime = FLVPlayback(_mediaContainer).totalTime;				curTime = FLVPlayback(_mediaContainer).playheadTime;			} else if (_swfPage) {							} else {				_mediaContainer.gotoAndStop(_setLoc);				totTime = Math.floor(totAmt/_fps);				curTime = Math.floor(_setLoc/_fps);			}						updateTime(curTime,totTime);		}				private function updateController(e:Event):void		{			if (!(_mediaContainer is AVM1Movie))//Must be AVM2Movie for this code to work			{				//Determine Time and Scrubber position for each Media type.				var curTime:Number = 1;				var totTime:Number = 1;				var perc:Number = 0;				var mediaEnded:Boolean = false;				if (_captivatePg)				{					if (_mediaContainer.rdinfoCurrentFrame >= (_mediaContainer.rdinfoFrameCount-1)) mediaEnded = true;					totTime = Math.floor(_mediaContainer.rdinfoFrameCount/_fps);					curTime = Math.floor(_mediaContainer.rdinfoCurrentFrame/_fps);					perc = _mediaContainer.rdinfoCurrentFrame/_mediaContainer.rdinfoFrameCount;				} else if (_audioPage) { 									} else if (_videoPage) {					//var className:Class = Class(getDefinitionByName(getQualifiedClassName(_mediaContainer)));					if (_mediaContainer is FLVPlayback)					{						if (FLVPlayback(_mediaContainer).playheadTime >= (FLVPlayback(_mediaContainer).totalTime-1)) mediaEnded = true;						totTime = FLVPlayback(_mediaContainer).totalTime;						curTime = FLVPlayback(_mediaContainer).playheadTime;						perc = (FLVPlayback(_mediaContainer).playheadPercentage * 0.01);					}				} else if (_swfPage) {									} else {										//if (_mediaContainer.currentFrame >= (_mediaContainer.totalFrames - 1)) mediaEnded = true;					totTime = Math.floor(_mediaContainer.totalFrames/_fps);					curTime = Math.floor(_mediaContainer.currentFrame/_fps);					perc = _mediaContainer.currentFrame/_mediaContainer.totalFrames;					//Check to see if media is looping or it has ended.					if (_mediaContainer.currentFrame >= _mediaContainer.totalFrames-1)					{						_loopCnt++;						if (_loopCnt >= 4) mediaEnded = true;					} else {						_loopCnt = 0;					}				}				if (curTime > totTime) curTime = totTime;				updateTime(curTime,totTime);				updateScrubber(perc);				if (mediaEnded && _model.playState == "play")				{					stopContent();					updatePlayPauseButton()					_mediaEnded = true;				}			}		}				private function resetController(e:Event):void		{			_captivatePg	=	_model.pageAttributes.captivatePage;			_mediaPath 		= 	_model.pageAttributes.mediaPath;			_imagePath 		= 	_model.pageAttributes.imageFile;			_autoPlay 		= 	_model.pageAttributes.autoPlayMedia;			_ptype			= 	_model.pageAttributes.pType;			_fps			=	_model.pageAttributes.fpsec;			_loader			=	_presentation.contentObject;			_loadContent	= 	_loader.content;			_mediaEnded 	= 	false;						trace("MediaControl: CONTROLLER RESET: " + _loadContent.name);			_infoPanel.updatePanel("MediaController has been Reset");						if (_loadContent is DynamicPageAPI)			{				_audioPage		=	DynamicPageAPI(_loadContent).audioPage				_videoPage		=	DynamicPageAPI(_loadContent).videoPage				_swfPage 		=	DynamicPageAPI(_loadContent).swfPage			} else {				_audioPage = null;				_videoPage = null;				_swfPage = null;			}						if (_model.pageAttributes.isAS2Movie)			{				trace("CONNECTION STRING: " + _model.connectString);								try {					as2LC.connect(_model.connectString);				} catch (error:ArgumentError) {					trace("Can't connect...the connection name is already being used by another SWF");					as2LC.close();					as2LC = null;					as2LC = new LocalConnection();					as2LC.client = this;					try {						as2LC.connect(_model.connectString);					} catch (error:ArgumentError) {						trace("Can't connect after resetting the connection.");					}				}				_mediaContainer = AVM1Movie(_loadContent);				_infoPanel.updatePanel("AVM1Movie: The Loaded SWF is an AS2 file and is being loaded with AS2 loader.");				trace("LOADING AS2 movie through AS2 LOADER.");			} else if (_ptype.indexOf("default") > -1) {				if (_loadContent is AVM1Movie) {					_mediaContainer = AVM1Movie(_loadContent);					_infoPanel.updatePanel("AVM1Movie: The Loaded SWF is an AS2 file. Therefore the media controller is hidden and will not be functional.");					//hide the media CONTROLLER					_model.mediaControlVisible = false;					if (_model.courseAttributes.pageComplete)					{						_model.markPageComplete(false);					}									} else if (_loadContent is MovieClip) {					_mediaContainer =  MovieClip(_loadContent);				}			} else if (_audioPage) {				//This is an audio page set it up.				//All audio pages need to set a 			} else if (_videoPage) {				//This is a video page. Set it up.				_mediaContainer =  DynamicPageAPI(_loadContent).mediaPlayer;			} else if (_swfPage) {				//This page contains a SWF. SEt it up.			} else {				//hide the media CONTROLLER				_model.mediaControlVisible = false;				if (_loadContent is MovieClip)				{					_mediaContainer =  MovieClip(_loadContent);				} else if (_loadContent is AVM1Movie) {					_mediaContainer = AVM1Movie(_loadContent);					_infoPanel.updatePanel("AVM1Movie: The Loaded SWF is an AS2 file. Therefore the media controller is hidden and will not be functional.");					if (_model.courseAttributes.pageComplete)					{						_model.markPageComplete(false);					}				}			}			//Reset Scrubber			scrubber_mc.x = outline_mc.x;			//Pause it until we are ready to play it.			pauseContent();			//Can we check to see if the event listener is there?			if (!_presentation.hasEventListener(Event.ENTER_FRAME))			{				_presentation.addEventListener(Event.ENTER_FRAME,updateController);			}						var preload:DisplayObject = this.stage.getChildByName("preloadingClip");			if (preload != null)			{				_preload = Preloading(preload);				//We don't want to start controller if it is still preloading.				_preload.addEventListener(Preloading.PAGE_LOADED,startController);			} else {				_preload = null;				startController();			}		}				private function startController(e:Event = null):void		{			if (_preload != null)			{				_preload.removeEventListener(Preloading.PAGE_LOADED,startController);			}						if (_autoPlay)			{				playContent();			} else {				pauseContent();			}		}				private function stopListening(e:Event = null):void		{			_presentation.removeEventListener(Event.ENTER_FRAME,updateController);		}				private function updateScrubber(perc:Number):void		{			var startNum:Number = outline_mc.x;			var totWidth:Number = outline_mc.width;			scrubber_mc.x = Math.floor(startNum + (totWidth*perc));		}				private function updateTime(curTime:Number,totTime:Number):void		{			//check to see if we need to send a completion event			var usePageComplete:Boolean = _model.courseAttributes.pageComplete;			if (curTime >= totTime - 0.5 && usePageComplete)			{				if (!_model.isPageComplete) 				{					if (!_model.inQuizNav)					{						_model.markPageComplete();					}				}			}			var tMin:Number = Math.floor(totTime/60);			var cMin:Number = Math.floor(curTime/60);			var tSecsS:String;			var cSecsS:String;			var tSecs:int = totTime%60;			var cSecs:int = curTime%60;			if (tSecs <10) {				tSecsS = "0" + tSecs.toString();			} else {				tSecsS = tSecs.toString();			}			if (cSecs <10) {				cSecsS = "0" + cSecs.toString();			} else {				cSecsS = cSecs.toString();			}						counter_txt.text = cMin.toString() + ":" + cSecsS + "/" + tMin.toString() + ":" + tSecsS;		}				//Since this control file is linked to a media_control.fla, we get the model using setters.		public function set model(m:CourseModel):void		{			_model = m;			_infoPanel = _model.feedbackPanel;			_model.addEventListener(Model.MODEL_CHANGE,stopListening);		}				public function get model():CourseModel//This way the view class can be used with any model.		{			return _model;		}				public function set presentation(p:Presentation):void		{			_presentation = p;			_presentation.addEventListener(Presentation.CONTENT_ADDED,resetController);		}				private function onLCStatus(e:StatusEvent):void		{			if (e.level == "error")			{				trace("The LocalConnection for sending data from MediaContoller to the AS2 file sent an error. Code: " + e.code);			}		}	}}