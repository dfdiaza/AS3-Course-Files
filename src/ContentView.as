package src{	import flash.display.*;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.StyleSheet;		import src.com.Preloading;	import src.com.Presentation;	import src.pages.DynamicPageAPI;
		public class ContentView extends View	{		private var loader:Loader;		private var _stage:Stage;		//private var bmp:Bitmap;		//CSS style		private var _cssLoader:URLLoader;		private var _css:StyleSheet;		private var _preloader:Preloading;		private var _settingsModel:SettingsModel;		private var _connectionString:String;				//Dynamically generated, unique string for using local connection with AS2 Loader.		private var _connectionStringAS2:String;				//Dynamically generated, unique string for using local connection from AS2 Loader.				//public var bg:Shape;		public var presentation:Presentation;		public var contentMask:Shape;				public function ContentView(c:Presentation,s:Stage,cm:CourseModel,sm:SettingsModel)		{			presentation = c;			_stage = s;			model = cm;			_settingsModel = sm;			//bg = presentation.getChildAt(0);			/*_cssLoader = new URLLoader();			_css = new StyleSheet();			_cssLoader.addEventListener(Event.COMPLETE,onLoadCSS);			_cssLoader.load(new URLRequest("swf/templateswf/demo.css"));*/						/*contentMask = new Shape();			contentMask.graphics.clear();			contentMask.graphics.beginFill(0xFFFFFF);			contentMask.graphics.drawRect(0, 0, _settingsModel.settings.presentSizeW, _height + 35);			contentMask.graphics.endFill();			contentMask.alpha = 1;*/			//this.addChild(bckgrnd);									loader = new Loader();			loader.name = "pageLoader";			//presentation.addChild(bmp);			//presentation.addChild(loader);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, contentLoaded); 						loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,contentLoading);						loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);						loader.contentLoaderInfo.addEventListener(Event.INIT,contentInit);		}				public function ioErrorHandler(event:IOErrorEvent):void		{			trace("IOERROR WHILE LOADING CONTENT PAGE: " + model.currentFile + " EVENT: " + event.text);		}				override public function update(event:Event = null):void		{			var curLoader:DisplayObject = presentation.getChildByName("pageLoader");						if (curLoader)			{				presentation.removeChild(curLoader);			}						var curPreloader:DisplayObject = _stage.getChildByName("preloadingClip");						if (curPreloader)			{				_stage.removeChild(curPreloader);			} else {				_preloader = new Preloading();				_preloader.name = "preloadingClip";				_preloader.message = "Loading Page...";				_preloader.model = model;			}						_stage.addChild(_preloader);			_preloader.x = _stage.stageWidth/2;			_preloader.y = _stage.stageHeight/2;			_preloader.addEventListener(Preloading.PAGE_LOADED,preloadingComplete);			//Load Page			if (loader.content != null) loader.unloadAndStop("true");//Stop all process and do garbage collection.						//For AS2 files			if (CourseModel(model).pageAttributes.isAS2Movie)			{				var myTime:Date = new Date();				_connectionString = Math.floor(Math.random() * 100000000) + "_" + myTime.getHours() + myTime.getMinutes() + myTime.getMilliseconds(); //creates a unique string				_connectionStringAS2 = Math.floor(Math.random() * 100000000) + "_two" + myTime.getHours() + myTime.getMinutes() + myTime.getMilliseconds();				CourseModel(model).connectString = _connectionString;				CourseModel(model).connectStringAS2 = _connectionStringAS2;				loader.load(new URLRequest(_settingsModel.paths.as2Loader + "?fileName=" + model.currentFile + "&connectionString=" + _connectionString + "&connectionString2=" + _connectionStringAS2));			} else {				loader.load(new URLRequest(model.currentFile));			}		}				public function pageCompleted(e:Event):void		{			model.markPageComplete(true);			e.stopPropagation();		}				private function preloadingComplete(e:Event):void		{			//Notify Page of load.						_preloader.removeEventListener(Preloading.PAGE_LOADED,preloadingComplete);			_stage.removeChild(_preloader);			//TWEENING STUFF			presentation.addChild(loader);		}				/*----------			Function: contentInit			Fires on init event for the loaded content movie. eventListener set in ContentView function.			Simply stops the content from playing so the playing of content can be controlled by auto play. 		------------*/		private function contentInit(e:Event)		{			if (e.target.content is MovieClip && CourseModel(model).pageAttributes.pType.toLowerCase().indexOf("default") > -1)			{				if (CourseModel(model).pageAttributes.captivatePage) //If captivate page stop it differently.				{					e.target.content.rdcmndPause = 1;				} else {					e.target.content.stop();				}			}		}				private function contentLoading(e:ProgressEvent)		{			//trace(LoaderInfo(e.target).actionScriptVersion + " - " + e.currentTarget.content);			_preloader.updateProgress(e.bytesLoaded, e.bytesTotal, 1, 1)		}				private function contentLoaded(event:Event = null):void		{			trace("CONTENT PAGE LOADED: " + model.currentFile);						presentation.newContentAdded(loader);	//Tell Presentation that content has loaded. Media Controller works off of an event from presentation			var childObj:Object = loader.content;			//trace(childObj);			if (childObj is DynamicPageAPI)			{				//trace(childObj is DynamicPageAPI)				childObj.currentPageTag = model.currentPage;				if (childObj.useScoXML)				{					childObj.rootNode = model.scoData;				}				childObj.textCss = _css;				childObj.preloader = _preloader;				childObj.settingsModel = _settingsModel;				childObj.courseModel = model;				//I need to tell the preloader what other stuff that needs to be loaded.				childObj.loadPage();			} else {				//_stage.removeChild(_preloader);				//Check to see if we need to monitor page complete				var usePageComplete:Boolean = model.courseAttributes.pageComplete;				if (usePageComplete)				{					childObj.addEventListener("SWF_PAGE_COMPLETE",pageCompleted);				}			}		}				private function onLoadCSS(evt:Event):void		{			_css.parseCSS(evt.target.data);		}			}}