package src{	import flash.display.MovieClip;	import flash.display.Stage;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.net.SharedObject;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.utils.Timer;		import src.classes.InfoPanel;	import src.classes.LoadingPercentages;	import src.com.AlertButton;	import src.com.Alerts;	public class LmsCom extends EventDispatcher	{		public static const LMS_DATA_LOADED:String = "lmsDataLoaded";		public static const NO_API_FOUND:String = "noApiFound";		public var scormData_array:Array;		public var scormValue_array:Array;		public var rusticiCommand_array:Array;				//Contains an array of get commands we want executed at the start.		public var lmsInitialized:Boolean = false;				public var testTxt:TextField;				private var _coursePreloader:MovieClip;		private var _model:CourseModel;		private var _courseAttributes:CourseAttributes;		private var _track:String;		private var _timer:Timer;							//Used for loading SCORM data. Use a timer so we can update the pre-loader.		private var _dataCount:int = 0;						//Used for loading SCORM data with the timer.		private var _dataTimer:Timer;		private var _feedback:InfoPanel;		private var _noAPIAlert:Alerts;						//Alert for when API can't be found.		private var _bookMarkAlert:Alerts;					//Alert for bookmarking.		private var _problemAlert:Alerts;					//Alert if loading of data is taking too long.		private var _state_array:Array = new Array();  		// an array to hold the state information		private var _sSep:String = '`';		private var _bookmarkPage:int;		private var _courseBookMarked:Boolean = false;		private var _data_cookie_so:SharedObject;			//Cookie object for local tracking.		//Loading percentage variables		private var _percentObj:LoadingPercentages;		private var _perc:Number;		private var _LMSStandard:String;					//Indicates whether SCORM, SCORM2004, AICC or NONE is being used for communication. This is determined by what the LMS provides not by what the course is set to.						public function LmsCom(cp:MovieClip,m:CourseModel)		{			_coursePreloader = cp;			_model = m;			_feedback = _model.feedbackPanel;			_courseAttributes = _model.courseAttributes;			_track = _courseAttributes.tracking;			_percentObj = new LoadingPercentages();			_perc = _percentObj.scormPerc;			//Build Data Array			createDataArray();			_timer = new Timer(1000,3);			_timer.addEventListener(TimerEvent.TIMER,checkAPIStatus);			_timer.addEventListener(TimerEvent.TIMER_COMPLETE,noAPIFound);						// initialize the alert window			_noAPIAlert = new Alerts();			_bookMarkAlert = new Alerts();			_problemAlert = new Alerts();						// add listeners			_noAPIAlert.addEventListener(Alerts.RIGHT_BUTTON_CLICK, onAPIConfirm);			_noAPIAlert.addEventListener(Alerts.LEFT_BUTTON_CLICK, onAPIReject);			_bookMarkAlert.addEventListener(Alerts.RIGHT_BUTTON_CLICK, bookmarkConfirm);			_bookMarkAlert.addEventListener(Alerts.LEFT_BUTTON_CLICK, bookmarkReject);			_problemAlert.addEventListener(Alerts.RIGHT_BUTTON_CLICK, onAPIConfirm);			_problemAlert.addEventListener(Alerts.LEFT_BUTTON_CLICK, onAPIReject);						// add the alert window to the display list			if (_coursePreloader != null) //Check to see if the course is playing inside of the course.swf file.			{				_coursePreloader.parent.addChild(_noAPIAlert);				_coursePreloader.parent.addChild(_bookMarkAlert);				_coursePreloader.parent.addChild(_problemAlert);			} else {				_model.mainPlayer.addChild(_noAPIAlert);				_model.mainPlayer.addChild(_bookMarkAlert);				_model.mainPlayer.addChild(_problemAlert);			}		}				//Called from CourseModel once the XML data is loaded.		public function beginLoading():void		{			if (_track == "SCORM1.2" || _track == "SCORM1.3" || _track == "AICC")			{				_feedback.updatePanel("Begin LMS Data Loading in beginLoading method.");				try {					_coursePreloader.status_txt.text = "Loading LMS Data...";				} catch (error:Error) {					trace("The player file is not running inside the course file: ");				}				if (ExternalInterface.available) lmsInitialized = IsLoaded();				_feedback.updatePanel("API was initialized: " + lmsInitialized);				if (lmsInitialized)				{					_LMSStandard = ExternalInterface.call("SD.GetCommunicationStandard");					_feedback.updatePanel("Communication Standard Being Used: " + _LMSStandard);					startTheCourse()				}				else					_timer.start();			} else if (_track == "COOKIE") { 				try {					_coursePreloader.status_txt.text = "Loading Bookmark Data...";				} catch (error:Error) {					trace("The player file is not running inside the course file: ");				}								loadCookieData();			} else {				scormLoaded();			}		}				private function loadCookieData():void		{			_data_cookie_so = SharedObject.getLocal("fc_suspend_data");			//Retrieve data from cookie			var COOKIE_bookmark:String = _data_cookie_so.data.bookmark;			var COOKIE_state:String = _data_cookie_so.data.suspend;						if (COOKIE_bookmark != null)			{				scormValue_array[0] = COOKIE_bookmark;				scormValue_array[1] = COOKIE_state;				continueTheCourse();			} else {				scormLoaded();			}						//Now do loading		}				private function loadingSCORM(curElement:Number):void		{			var perc:Number = (curElement+1)/rusticiCommand_array.length;			var newPerc:Number;			var prevPerc:Number = _percentObj.previousPercent;			newPerc = perc*(_perc - prevPerc) + prevPerc;		_feedback.updatePanel("Percentage LMS: " + newPerc);			try {			    _coursePreloader.percent_txt.text = Math.ceil(newPerc*100).toString() + "%";				_coursePreloader.status_txt.text = "Loading LMS Data...";				_coursePreloader.bar_mc.scaleX = newPerc;			} catch (error:Error) {			     trace("The player file is not running inside the course file: ");			}		}				private function scormLoaded():void		{			trace("LMS DATA HAS BEEN LOADED.");			dispatchEvent(new Event(LmsCom.LMS_DATA_LOADED));		}				private function startTheCourse():void		{			readData();		}				private function continueTheCourse():void		{			loadState();			_bookmarkPage = checkForBookmark();			_feedback.updatePanel("Course Was Bookmarked?: " + _courseBookMarked);			if (_courseBookMarked) 			{				//Display Alert				_bookMarkAlert.headerText = "Bookmark Found!";				_bookMarkAlert.alertText = "This course has been bookmarked. Would you like to return to where you left off?";				_bookMarkAlert.rightButtonText = "Yes";				_bookMarkAlert.leftButtonText = "No";								// show the alert window when you need it				_bookMarkAlert.showAlert();			} else {				scormLoaded();			}		}				private function readData():void		{			_feedback.updatePanel("readData method of LmsCom...");			/*for (var i:Number=0; i<scormData_array.length; i++){				loadingSCORM(i)				scormValue_array[i] = ExternalInterface.call("SCOGetValue",scormData_array[i]);			}*/			_dataTimer = new Timer(50,100);			_dataTimer.addEventListener(TimerEvent.TIMER,readDataTimer);			_dataTimer.addEventListener(TimerEvent.TIMER_COMPLETE,problemLMSData);			scormValue_array[_dataCount] = "--";			_dataTimer.start();		}				private function readDataTimer(e:TimerEvent):void		{			loadingSCORM(_dataCount);			//_feedback.updatePanel("External Interface Available?: " + ExternalInterface.available);			if (ExternalInterface.available) scormValue_array[_dataCount] = ExternalInterface.call(rusticiCommand_array[_dataCount]);						//_feedback.updatePanel("SCORM Call: " + rusticiCommand_array[_dataCount]);			_feedback.updatePanel("SCORM Call Results: " + rusticiCommand_array[_dataCount] + " - " + scormValue_array[_dataCount]);						if (scormValue_array[_dataCount] != "--")// && scormValue_array[_dataCount] != undefined)			{				_dataCount++;				scormValue_array[_dataCount] == "--"			}			//Are we finished			if (_dataCount >= rusticiCommand_array.length)			{				_dataTimer.stop();				_dataTimer.removeEventListener(TimerEvent.TIMER,readDataTimer);				continueTheCourse();			}		}				private function checkForBookmark():int		{			var sMovie:String = String(apiGetBookmark());			if (apiGetLastError() == 0 && int(sMovie) != 0) 			{				_courseBookMarked = true;				return int(sMovie);			} else {				return 0;			}		}				private function bookmarkConfirm(e:Event):void		{			_feedback.updatePanel("Bookmark Data in bookmarkConfirm: " + _bookmarkPage);			_model.currentIndex = _bookmarkPage;			//_model.changePage(int(_bookmarkPage));			scormLoaded();		}				private function bookmarkReject(e:Event):void		{			scormLoaded();		}				/*		- Find out if the API has been discovered by the HTML page.		- After 3 seconds display a message.		*/		private function checkAPIStatus(e:TimerEvent):void		{			if (ExternalInterface.available) lmsInitialized = IsLoaded();			if (lmsInitialized)			{				_timer.stop();				_timer.removeEventListener(TimerEvent.TIMER,checkAPIStatus);				_timer.removeEventListener(TimerEvent.TIMER_COMPLETE,noAPIFound);				startTheCourse()			}			_feedback.updatePanel("LMSInitialized: " + lmsInitialized);		}				/*		- This function will fire after 3 seconds of not finding the SCORM API.		*/		private function noAPIFound(e:TimerEvent):void		{			trace("SCORM API WAS NOT FOUND.");			dispatchEvent(new Event(LmsCom.NO_API_FOUND));			_timer.removeEventListener(TimerEvent.TIMER,checkAPIStatus);			_timer.removeEventListener(TimerEvent.TIMER_COMPLETE,noAPIFound);			//Display Alert			_noAPIAlert.headerText = "LMS Warning";			_noAPIAlert.alertText = "The SCORM API could not be found. Therefore communication with the LMS will not occur. Do you want to continue anyway?";			_noAPIAlert.rightButtonText = "Yes";			_noAPIAlert.leftButtonText = "No";						// show the alert window when you need it			_noAPIAlert.showAlert();		}				//This function will fire after 5 seconds of trying to load the LMS data		private function problemLMSData(e:TimerEvent):void		{			_dataTimer.stop();			_dataTimer.removeEventListener(TimerEvent.TIMER,readDataTimer);			_dataTimer.removeEventListener(TimerEvent.TIMER_COMPLETE,problemLMSData);			//Display Alert			_problemAlert.headerText = "Problem Loading LMS Data";			_problemAlert.alertText = "There has been a problem loading LMS data and the process has been stopped. Would you like to continue with the course anyway?";			_problemAlert.rightButtonText = "Yes";			_problemAlert.leftButtonText = "No";						// show the alert window when you need it			_problemAlert.showAlert();		}				private function onAPIConfirm(e:Event):void		{			scormLoaded();		}				private function onAPIReject(e:Event):void		{			//Close the course???		}				private function createDataArray():void		{			rusticiCommand_array = new Array(				'SD.GetBookmark',				'SD.GetDataChunk',				'SD.GetPreviouslyAccumulatedTime',	//Total time in course				'SD.GetLessonMode',				'SD.GetStatus',				'SD.GetTakingForCredit',				'SD.GetEntryMode',				'SD.GetStudentID',				'SD.GetStudentName');						//Value array initialize to blank			scormValue_array = new Array();			for (var i:Number=0; i<rusticiCommand_array.length; i++){				scormValue_array[i] = "";			}		}				/*		* Load the suspend data into our state array		*/		private function loadState():void		{			/* get the suspend_data */			var sSuspend:String = apiGetSuspendData();						/* load the data into a temp array */			var aParts:Array = sSuspend.split(_sSep);						/* loop through the array */			for (var i:Number=0; i<aParts.length; i=i+2)			{				/* see if we have an id */				if (aParts[i] != "")				{					/* we do, copy the data to the state array */					_state_array[ aParts[i] ] = aParts[i+1];				}			}		}				/*		* Set the state in suspend data 		* we do this by flattening the data stored in the state array		*/		private function saveState():void		{			/* buffer for the state arrray */			var sSuspend:String = "";						/* loop through the array */			for (var i:* in _state_array)			{				sSuspend += i + _sSep + _state_array[i] + _sSep;			}			/* see if there is any data to set */			if (sSuspend != "")			{					/* there is, store this with SCORM */				var success:Boolean = apiSetSuspendData(sSuspend);			}			_feedback.updatePanel("saveState success: " + success);		}				/*		* Remember a state value associated with this id		* The state information is held in a javascript array		*/		public function apiSetState(sId:String,sValue:String):void		{			_feedback.updatePanel("apiSetState: " + sId + " - " + sValue);			/* set the state in our state arrat */			_state_array[sId] = sValue;						/* write out the data to LMS */			saveState();						/*Check completion status*/			checkComplete(sValue);		}				/*		* Get the state value of this id		*/		public function apiGetState(sId:String):String		{			/* see if there is an ID in the state array */			if (_state_array[sId])			{				/* there is, return it */				return _state_array[sId];			}			else			{				/* there is no ID, return an empty string */				return "";			}		}				/*		Passed a string that represents either visited pages		or pages marked complete using apiPageComplete()		Checks for completion and sends message to LMS.		*/		private function checkComplete(sValue:String):void 		{			if (sValue != null){				// Check to see if all pages are visited. If so submit completed status.				if (sValue != ""){					var usePageComplete:Boolean = _courseAttributes.pageComplete;					var completion:String = _courseAttributes.completion;					//Check to see if using PageComplete method or simply visit page method					if (!usePageComplete){						if (completion != null && completion != "" && completion.toLowerCase() != "none"){							//Check the completion							doCompletion(sValue,completion);						}					} else {						if (completion != null && completion != "" && completion.toLowerCase() != "none"){//for this method set completion if not already set.							completion = "completed"						}						//Check the completion						doCompletion(sValue,completion);					}				}			}		}				//Cycles through visited array to chec completion		private function doCompletion(sValue:String,completion:String){			// break it apart (visited array)			var suspend_array:Array = sValue.split(":");			var visit_array:Array = suspend_array[0].split(",");			var course_complete:Boolean;			if (visit_array.length > 0) {				course_complete = true;				for (var i:Number = 0;i < visit_array.length;i++){					//Has the page been visited?					if (visit_array[i] != "1"){						course_complete = false;					}				}			} else {				course_complete = false;//default to not complete if array doesn't exist;			}			//trace(visit_array);			//trace(course_complete);			if (course_complete){//Every page visited?				apiSetCompletion(true,completion);//record it			}		}				/*							SCORM API Functions		*/				// set the completion status		//	bComplete - true is SCO is complete - a normal exit is needed		//	            false if SCO is incomplete - a suspended exit is needed		//	sStatus - the completion status - "completed", "incomplete", "passed", or "failed"		//		//	Returns true if successful false if not. If not successful query the error code for status and/or exit		//	AICC is handled differently.		public function apiSetCompletion(bComplete:Boolean,sStatus:String):Boolean		{			var endResult:Boolean = false;			scormValue_array[4] = sStatus;			if (ExternalInterface.available) 			{				/*if (bComplete)				{					endResult = ExternalInterface.call("SD.SetReachedEnd");				}*/								switch (sStatus.toLowerCase())				{					case "completed":						endResult = ExternalInterface.call("SD.SetReachedEnd");						break;					case "passed":						endResult = ExternalInterface.call("SD.SetPassed");						break;					case "failed":						endResult = ExternalInterface.call("SD.SetFailed");						break;					case "incomplete":						endResult = ExternalInterface.call("SD.ResetStatus");						break;					default:						endResult = ExternalInterface.call("SD.ResetStatus");				}			} else {				return false;			}						apiSendCommit()			return endResult;		}				//Get the completion status		public function apiGetCompletion():String 		{			return scormValue_array[4];		}				//Set the bookmark		public function apiSetBookmark(n:int):Boolean		{			_feedback.updatePanel("Trying to bookmark - n: " + n + " -track: " + _track);			scormValue_array[0] = n;			var endResult:Boolean = false;			if (_track == "SCORM1.2" || _track == "SCORM1.3" || _track == "AICC")			{				if (ExternalInterface.available)				{					endResult = ExternalInterface.call("SD.SetBookmark", String(n));				}				_feedback.updatePanel("Bookmark Success: " + endResult);			} else if (_track.toUpperCase() == "COOKIE") {					_data_cookie_so.data.bookmark = n;					_data_cookie_so.flush();			}			apiSendCommit()						return endResult;		}				//Get the bookmark		public function apiGetBookmark():String		{			return scormValue_array[0];		}				//Set success status		//sStatus - the success status - "passed", "failed", or "unknown"		//Only used for SCORM RTE 1.3		//	Returns true if successfule, false if unsuccessful.		public function apiSetSuccess(sStatus):Boolean		{			if (_track == "SCORM1.3") 			{				if (ExternalInterface.available)				{					var endResult:Boolean = false;					if (sStatus == "passed") endResult = ExternalInterface.call("SD.SetPassed");					if (sStatus == "failed") endResult = ExternalInterface.call("SD.SetFailed");					return endResult;				} else {					return false;				}			} else {				return false;			}					}				//Commit data		public function apiSendCommit():Boolean		{			var endResult:Boolean = false;			if (ExternalInterface.available)			{				if (_track == "SCORM1.2" || _track == "SCORM1.3" || _track == "AICC") 				{					endResult = ExternalInterface.call("SD.CommitData");					}			} 			return endResult;					}				//Finish SCO		public function apiSendFinish():Boolean		{			var endResult:Boolean = false;			if (_track == "SCORM1.2" || _track == "SCORM1.3" || _track == "AICC") 			{				if (ExternalInterface.available) endResult = ExternalInterface.call("SD.Finish");			} 			return endResult;		}				// get the suspend data		public function apiGetSuspendData():String		{			return scormValue_array[1];		}				// set the suspend data		public function apiSetSuspendData(suspend_str:String):Boolean		{			scormValue_array[1] = suspend_str;			var endResult:Boolean = false;			if (_track == "SCORM1.2" || _track == "SCORM1.3" || _track == "AICC") 			{				if (ExternalInterface.available) endResult = ExternalInterface.call("SD.SetDataChunk",suspend_str);			} else if (_track.toUpperCase() == "COOKIE") {				_data_cookie_so.data.suspend = suspend_str;				_data_cookie_so.flush();				endResult = true;			}						return endResult;		}				/*		* return the current hours:minutes:seconds given a data object		*/		private function getHMS(dateNow:Date):String		{			var hh = dateNow.getHours();			var mm = dateNow.getMinutes();			var ss = dateNow.getSeconds();			if (hh < 10) hh = "0" + hh;			if (mm < 10) mm = "0" + mm;			if (ss < 10) ss = "0" + ss;			return hh + ":" + mm + ":" + ss;		}				//Returns the date for AICC and SCORM1.3		private function getYMD(dateNow:Date,SCORM:Boolean):String		{			var yy = dateNow.getFullYear();			var mm = dateNow.getMonth() + 1;			var dd = dateNow.getDate();			if (mm < 10) mm = "0" + mm;			if (dd < 10) dd = "0" + dd;			if (SCORM){				return yy + "-" + mm + "-" + dd;			}else{				return yy + "/" + mm + "/" + dd;			}		}				///Returns the date in Date type format (SCORM 1.3)		private function getDateType(dateNow:Date):String		{			return getYMD(dateNow,true) + "T" + getHMS(dateNow);		}				// set the  score		//	nMin - the minimum score (normalized between 0-100)		//	nMax - the maximum score (normalized between 0-100)		//	nRaw - the learner's score (normalized between 0-100)		public function apiSetScore(nMin:Number,nMax:Number,nRaw:Number,sResult:String = null)		{			var endResult:Boolean = false;			if (ExternalInterface.available) 			{				if (_track == "SCORM1.2" || _track == "SCORM1.3" || _track == "AICC")				{					endResult = ExternalInterface.call("SD.SetScore", nRaw, nMax, nMin);				}			}						apiSendCommit();						return endResult;		}				//Get the last error		public function apiGetLastError():int		{			if (ExternalInterface.available) 			{				var lastError:int = ExternalInterface.call("SD.GetLastError");								return lastError;			} else {				return 0;			}		}										/*			Getter and Setter Methods		*/				public function get stateArray():Array		{			return _state_array;		}				public function get LMSStandard():String		{			return _LMSStandard;			}				public function get tracking():String		{			return _track;		}				/*			Methods for Rustici code		*/		public function apiSendFillInBlankData(strID:String,lResponse:String,blnCorrect:Boolean,cResponse:String,description:String,weight:int,latency:uint,objectiveID:String):String		{			_feedback.updatePanel("FILL_IN_THE_BLANK Data: strID: " + strID+ " -lResponse: " + lResponse+ " -blnCorrect: " + blnCorrect+ " -cResponse: " + cResponse+ " -description: " + description+ " -weight: " + weight+ " -latency: " + latency+ " -objectiveID: " + objectiveID);						//trace("submitting TRUE FALSE data.");			if (ExternalInterface.available) 			{				var errmsg:String = String(ExternalInterface.call("SD.RecordFillInInteraction",strID,lResponse,blnCorrect,cResponse,description,weight,latency,objectiveID));				_feedback.addToPreviousUpdate("ERROR MESSAGE: " + errmsg);				return errmsg;			} else {				return "ERROR: External Interface Not Available";			}		}				public function apiSendMultipleCorrectData(strID:String,lResponse:Array,blnCorrect:Boolean,cResponse:Array,description:String,weight:int,latency:uint,objectiveID:String):String		{			trace("submitting Multiple Correct data.");			_feedback.updatePanel("MULTIPLE CORRECT Data: strID: " + strID+ " -lResponse: " + lResponse.toString() + " -blnCorrect: " + blnCorrect+ " -cResponse: " + cResponse.toString() + " -description: " + description+ " -weight: " + weight+ " -latency: " + latency+ " -objectiveID: " + objectiveID);			if (ExternalInterface.available) 			{				//We are calling the PreRecordMultipleCorrectInteraction as we need to take the learner response and correct response and convert to a ResponseIdentifier object				//This needs to be done in JavaScript. Multiple objects are stored in an array. This new function is added as a part of the RI code.				var errmsg:String = String(ExternalInterface.call("SD.PreRecordMultipleCorrectInteraction",strID,lResponse.join("$%"),blnCorrect,cResponse.join("$%"),description,weight,latency,objectiveID));				_feedback.addToPreviousUpdate("ERROR MESSAGE: " + errmsg);				return errmsg;			} else {				return "ERROR: External Interface Not Available";			}		}				public function apiSendMultipleChoiceData(strID:String,lResponse:String,blnCorrect:Boolean,cResponse:String,description:String,weight:int,latency:uint,objectiveID:String):String		{			_feedback.updatePanel("MULTIPLE CHOICE Data: strID: " + strID+ " -lResponse: " + lResponse+ " -blnCorrect: " + blnCorrect+ " -cResponse: " + cResponse+ " -description: " + description+ " -weight: " + weight+ " -latency: " + latency+ " -objectiveID: " + objectiveID);			trace("MULTIPLE CHOICE Data: strID: " + strID+ " -lResponse: " + lResponse+ " -blnCorrect: " + blnCorrect+ " -cResponse: " + cResponse+ " -description: " + description+ " -weight: " + weight+ " -latency: " + latency+ " -objectiveID: " + objectiveID);			//trace("submitting Multiple Choice data.");			if (ExternalInterface.available) 			{				trace("External Interface is Still Available");				//We are calling the PreRecordMultipleChoiceInteraction as we need to take the learner response and correct response and convert to a ResponseIdentifier object				//This needs to be done in JavaScript. This new function is added as a part of the RI code.				var errmsg:String = String(ExternalInterface.call("SD.PreRecordMultipleChoiceInteraction",strID,lResponse,blnCorrect,cResponse,description,weight,latency,objectiveID));				_feedback.addToPreviousUpdate("ERROR MESSAGE: " + errmsg);				trace("ERROR MESSAGE: " + errmsg);				return errmsg;			} else {				return "ERROR: External Interface Not Available";			}		}				public function apiSendTrueFalseData(strID:String,lResponse:Boolean,blnCorrect:Boolean,cResponse:Boolean,description:String,weight:int,latency:uint,objectiveID:String):String		{			_feedback.updatePanel("TRUE_FALSE Data: strID: " + strID+ " -lResponse: " + lResponse+ " -blnCorrect: " + blnCorrect+ " -cResponse: " + cResponse+ " -description: " + description+ " -weight: " + weight+ " -latency: " + latency+ " -objectiveID: " + objectiveID);			//trace("submitting TRUE FALSE data.");			if (ExternalInterface.available) 			{				var errmsg:String = String(ExternalInterface.call("SD.RecordTrueFalseInteraction",strID,lResponse,blnCorrect,cResponse,description,weight,latency,objectiveID));				_feedback.addToPreviousUpdate("ERROR MESSAGE: " + errmsg);				return errmsg;			} else {				return "ERROR: External Interface Not Available";			}		}				public function apiGetLearnerResponse(strID:String):Array		{			trace("apiGetLearnerResponse");			if (ExternalInterface.available) 			{				var data:Object = ExternalInterface.call("SD.GetInteractionLearnerResponses",strID);				var dataArray:Array = new Array();				//var newData:Array = data[0];				if (data)				{					_feedback.updatePanel("Learner Data Retrieved: " + data[0]);										if (data[0] == undefined || data[0] == "undefined" || data[0] == null || data[0] == "null") 					{						_feedback.addToPreviousUpdate("UNDEFINED");						return null;					} else {											for (var i in data){							_feedback.addToPreviousUpdate("---" + data[i]);							//trace(obj[i])							dataArray[i] = data[i];						}					}				}				return dataArray;			} else {				trace("ERROR: External Interface Not Available");				return null;			}		}				public function apiGetLearnerResponseChoice(strID:String):Array		{			if (ExternalInterface.available) 			{				//Call a RI JavaScript function that will return the data in a string format				var data:String = ExternalInterface.call("SD.PreGetInteractionLearnerResponsesChoice",strID);				var dataArray:Array = new Array();				//var newData:Array = data[0];				if (data)				{					_feedback.updatePanel("Learner Data Retrieved: " + data);										/*if (data[0] == undefined || data[0] == "undefined" || data[0] == null || data[0] == "null") 					{						_feedback.addToPreviousUpdate("UNDEFINED");						return null;					} else {												for (var i in data){							_feedback.addToPreviousUpdate("---" + data[i]);							//trace(obj[i])							dataArray[i] = data[i];						}					}*/					dataArray[0] = data;				}				return dataArray;			} else {				trace("ERROR: External Interface Not Available");				return null;			}		}				public function apiSendScoreData(sc:Number,max:Number,min:Number)		{			_feedback.updatePanel("Quiz Score Submitted: Score: " + sc + " -Max: " + max + " -Min: " + min);			//trace("SCORE Sent: " + sc + " - " + max + " - " + min);			if (ExternalInterface.available) 			{				var errmsg:String = String(ExternalInterface.call("SD.SetScore",sc,max,min));				return errmsg;			} else {				trace("ERROR: External Interface Not Available");				return "ERROR: External Interface Not Available";			}		}				public function IsLoaded():Boolean{			_feedback.updatePanel("Checking IsLoaded for LMSInitialize.");			var blnIsLoaded = new Boolean(ExternalInterface.call("SD.IsLoaded"));			return blnIsLoaded;		}				//Additional Rustici functions that could be used.		public function GetStudentID():String		{			var studentID = ExternalInterface.call("SD.GetStudentID");			if(studentID == undefined)			{				studentID = "null";			}			return studentID;		}		public function GetStudentName():String		{ 			var studentName = ExternalInterface.call("SD.GetStudentName");			if(studentName == undefined)			{				studentName = "null";			}			return studentName;		}				public function WriteComment(strComment:String){ExternalInterface.call("SD.WriteComment", strComment)};				public function GetLaunchData():String		{			var launchData = ExternalInterface.call("SD.GetLaunchData" );			if(launchData == undefined || launchData == "")			{				launchData = "null";			}			return launchData;		}				public function GetComments():String		{			var comments = ExternalInterface.call("SD.GetComments");			if(comments == undefined)			{				comments = "null";			}			return comments;		}					public function GetLMSComments():String		{			var LMSComments = ExternalInterface.call("SD.GetLMSComments");			if(LMSComments == undefined)			{				LMSComments = "null";			}			return LMSComments;		}				//Preferences		public function GetAudioPlayPreference():String 		{			var audioPlayPref = ExternalInterface.call("SD.GetAudioPlayPreference");			if(audioPlayPref == undefined)			{				audioPlayPref = "null";			}			return audioPlayPref;		}				//returns int 1-100		public function GetAudioVolumePreference():String		{			var audioVolumePref = ExternalInterface.call("SD.GetAudioVolumePreference");			if(audioVolumePref == undefined)			{				audioVolumePref = "null";			}			return audioVolumePref;		}				public function GetLanguagePreference():String		{			var languagePref = ExternalInterface.call("SD.GetLanguagePreference");			if(languagePref == undefined)			{				languagePref = "null";			}			return languagePref;		}				public function GetSpeedPreference():String		{			var speedPref = ExternalInterface.call("SD.GetSpeedPreference");			if(speedPref == undefined)			{				speedPref = "null";			}			return speedPref;		}				public function GetTextPreference():String		{			var textPref = ExternalInterface.call("SD.GetTextPreference");			if(textPref == undefined)			{				textPref = "null";			}			return textPref;		}				//Timing		public function GetPreviouslyAccumulatedTime():String		{			var prevAccumTime = ExternalInterface.call("SD.GetPreviouslyAccumulatedTime");			if(prevAccumTime == undefined)			{				prevAccumTime = "null";			}			return prevAccumTime;		}				public function GetSessionAccumulatedTime():String		{			var sessionAccumTime = ExternalInterface.call("SD.GetSessionAccumulatedTime");			if(sessionAccumTime == undefined)			{				sessionAccumTime = "null";			}			return sessionAccumTime;		}				public function GetMaxTimeAllowed():String		{			var maxTimeAllowed = ExternalInterface.call("SD.GetMaxTimeAllowed");			if(maxTimeAllowed == undefined)			{				maxTimeAllowed = "null";			}			return maxTimeAllowed;		}				public function DisplayMessageOnTimeout(){ExternalInterface.call("SD.DisplayMessageOnTimeout");}		public function ExitOnTimeout(){ExternalInterface.call("SD.ExitOnTimeout");}				//Testing		public function GetPassingScore():String		{			var passingScore = ExternalInterface.call("SD.GetPassingScore");			if(passingScore == undefined)			{				passingScore = "null";			}			return passingScore;		}				public function GetStatus():String		{			var strStatus = ExternalInterface.call("SD.GetStatus");			strStatus = strStatus.toString();						return strStatus;		}				public function GetEntryMode():String		{			var entryMode = ExternalInterface.call("SD.GetEntryMode");			if(entryMode == undefined)			{				entryMode == "null";			}			return entryMode;		}				public function GetLessonMode():String		{			var lessonMode = ExternalInterface.call("SD.GetLessonMode");			if(lessonMode == undefined)			{				lessonMode = "null";			}			return lessonMode;		}				public function GetTakingForCredit():String 		{			var takingForCredit = ExternalInterface.call("SD.GetTakingForCredit");			if(takingForCredit == undefined)			{				takingForCredit = "null";			}			return takingForCredit;		}				//Objectives			public function SetObjectiveScore(strObjectiveID, intScore, intMaxScore, intMinScore){ ExternalInterface.call("SD.SetObjectiveScore", intScore, intMaxScore, intMinScore);}		public function SetObjectiveStatus(strObjectiveID, Lesson_Status){ ExternalInterface.call("SD.SetObjectiveStatus", strObjectiveID, Lesson_Status);}		public function GetObjectiveStatus(strObjectiveID:String):String		{			var strStatus = ExternalInterface.call("SD.GetObjectiveStatus", strObjectiveID);			if(strStatus == undefined)			{				strStatus = "null";			}			return strStatus;		}		public function GetObjectiveScore(strObjectiveID):String		{ 			var strObjectiveScore = ExternalInterface.call("SD.GetObjectiveScore", strObjectiveID);			if(strObjectiveScore == undefined)			{				strObjectiveScore = "null";			}			return strObjectiveScore		}				public function IsLmsPresent():Boolean		{			var strLMSPresent = ExternalInterface.call("SD.IsLmsPresent");			if(strLMSPresent == "true" || strLMSPresent == true)			{				return true;			}			else			{				return false;			}		}				public function GetLastLMSErrorCode():String 		{			var lastLMSErrorCode = ExternalInterface.call("SD.GetLastLMSErrorCode");			if(lastLMSErrorCode == undefined)			{				lastLMSErrorCode = "null";			}			return lastLMSErrorCode;		}				public function GetLastErrorDesc()		{			var lastErrorDesc = ExternalInterface.call("SD.GetLastErrorDesc");			if(lastErrorDesc == undefined)			{				lastErrorDesc = "null";			}			return lastErrorDesc;		}				public function Suspend(){ ExternalInterface.call("SD.Suspend");}		public function TimeOut(){ ExternalInterface.call("SD.TimeOut");}				public function Unload(){ ExternalInterface.call("SD.Unload");}		public function ConcedeControl(){ ExternalInterface.call("SD.ConcedeControl");}				public function WriteToDebug(strInfo:String){			ExternalInterface.call("SD.WriteToDebug", strInfo);		}	}}