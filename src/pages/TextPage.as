package src.pages{	import src.pages.DynamicPageAPI;	import flash.text.TextField;	import flash.display.Loader;	import flash.events.Event;	import flash.net.URLRequest;	import flash.display.MovieClip;	import flashx.textLayout.elements.TextFlow;	import flashx.textLayout.container.ContainerController;	import flashx.textLayout.conversion.TextConverter;	import fl.text.TLFTextField;	import flashx.textLayout.formats.TextLayoutFormat;	public class TextPage extends DynamicPageAPI	{		private var _sizeH:Number;		private var _sizeW:Number;		private var _noteType:String;		private var _ldr:Loader;		private var _iconIndent:Number = 10;		private var _margin:Number = 10;		private var _iconH:Number;		private var _iconW:Number;		private var _isNote:Boolean = false;		private var _iconX:Number;		private var _iconY:Number;				public var txtFld:TLFTextField;		public var txtFlow:TextFlow;		public var noteFld:TLFTextField;		public var noteFlow:TextFlow;		public var textLayoutFormat:TextLayoutFormat;		public var textLayoutFormat2:TextLayoutFormat;				public function TextPage()		{			super();			//trace("textPage");			// create two TextLayoutFormat objects			textLayoutFormat = new TextLayoutFormat();			textLayoutFormat2 = new TextLayoutFormat();			// set format attributes in the first one			textLayoutFormat.textIndent = 8;			textLayoutFormat.color = 0x336633;			textLayoutFormat.fontFamily = "Arial, Helvetica, _sans";			textLayoutFormat.fontSize = 24;			// set some of the same attributes on the second one			textLayoutFormat2.color = 0x0000CC;			textLayoutFormat2.fontSize = 12;			textLayoutFormat2.textIndent = 24;						// use apply() to apply textLayoutFormat2 format settings; assign format to the text flow			//textLayoutFormat.apply(textLayoutFormat2);  			//textFlow.hostFormat = textLayoutFormat;		}				override public function loadPage():void		{			default xml namespace = "www.rapidintake.com/xmlgrammars/fc/sco";			//trace("text page loading");			//trace("CURent Page: " + currentPageTag.pText);			//trace("setting: " + settingsModel.settings.presentSizeW);			_sizeH = settingsModel.settings.presentSizeH;			_sizeW = settingsModel.settings.presentSizeW;			_noteType = currentPageTag.@nType.toLowerCase();						//Set up flow for Text Field			txtFlow = txtFld.textFlow;			var pTextStr:String = currentPageTag.pText;			if (pTextStr.indexOf("TextFlow") > -1) //Uses TextFlow			{				txtFlow = TextConverter.importToFlow(pTextStr,TextConverter.TEXT_LAYOUT_FORMAT);			} else if (pTextStr.toUpperCase().indexOf("</P>") > -1) {				txtFlow = TextConverter.importToFlow(pTextStr,TextConverter.TEXT_FIELD_HTML_FORMAT);				//Formatting				txtFlow.hostFormat = textLayoutFormat;			} else {				txtFlow = TextConverter.importToFlow(pTextStr,TextConverter.PLAIN_TEXT_FORMAT);				//Formatting				txtFlow.hostFormat = textLayoutFormat;			}						//Formatting			txtFlow.hostFormat = textLayoutFormat;						//trace("noteType: " + _noteType);			if (_noteType != null && _noteType != "none")			{				_isNote = true;								//Set up flow for Text Field				noteFlow = noteFld.textFlow;				var noteStr:String = currentPageTag.note;				if (noteStr.indexOf("TextFlow") > -1) //Uses TextFlow				{					noteFlow = TextConverter.importToFlow(noteStr,TextConverter.TEXT_LAYOUT_FORMAT);				} else if (noteStr.toUpperCase().indexOf("</P>") > -1) {					noteFlow = TextConverter.importToFlow(noteStr,TextConverter.TEXT_FIELD_HTML_FORMAT);				} else {					noteFlow = TextConverter.importToFlow(noteStr,TextConverter.PLAIN_TEXT_FORMAT);				}								createNote();			}  else {				_isNote = false;				//Create text field				addContentText();			}					}				private function addNoteText():void		{			noteFld.x = _iconX + _iconW + _margin;			noteFld.y = _iconY;			noteFld.width = _sizeW - (_margin * 3) - _iconW - _iconX;			noteFld.height = _iconH;			noteFlow.flowComposer.addController(new ContainerController(noteFld, noteFld.width - 5, noteFld.height - 5));			//tlfText.text = fileContent;			noteFlow.flowComposer.updateAllControllers();		}				private function addContentText():void		{			txtFld.x = txtFld.y = _margin;			txtFld.width = _sizeW - _margin - _margin;			if (_isNote)			{				txtFld.height = _sizeH - _margin - _margin - _iconH;			} else {				txtFld.height = _sizeH - _margin - _margin;			}						txtFlow.flowComposer.addController(new ContainerController(txtFld, txtFld.width - 5, txtFld.height - 5));			//tlfText.text = fileContent;			txtFlow.flowComposer.updateAllControllers();		}				private function createNote():void		{			//trace(settingsModel.paths.noteIcon);			_ldr = new Loader();			_ldr.contentLoaderInfo.addEventListener(Event.COMPLETE,iconLoaded);			var iconPath:URLRequest;			switch (_noteType)			{				case "note":					iconPath = new URLRequest(settingsModel.paths.noteIcon);					break;				case "tip":					iconPath = new URLRequest(settingsModel.paths.tipIcon);					break;				case "warning":					iconPath = new URLRequest(settingsModel.paths.warningIcon);					break;			}			try			{				_ldr.load(iconPath);			} catch (err:Error) {				trace("UNABLE to LOAD PAGE ICON");			}		}				private function iconLoaded(e:Event):void		{			_ldr.removeEventListener(Event.COMPLETE,iconLoaded);			var icon_mc:MovieClip = MovieClip(e.target.content);			_iconH = icon_mc.height + 10; //Add 10 for a buffer			_iconW = icon_mc.width + 10;			trace(_iconH + " - " + _iconW);			//Create Note Text field			//Create text field			addContentText();						icon_mc.x = _iconX = _iconIndent;			icon_mc.y = _iconY = _sizeH - _margin - _iconH;			//Creat note field			addNoteText();			//Add elements to the stage.			addChild(icon_mc);		}	}}