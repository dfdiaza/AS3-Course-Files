package src.pages{	import src.pages.DynamicPageAPI;	import flash.text.*;	import flash.display.Loader;	import flash.events.Event;	import flash.net.URLRequest;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import com.greensock.*;	import com.greensock.easing.*;	import fl.video.*;	public class VideoEthnographer extends DynamicPageAPI	{		public var testButton:MovieClip;		public var projectorBack:MovieClip;		public var bottomBar:MovieClip;				//Text Field Variables		public var drName:TextField;		public var textPageName:TextField;				//Variables for buttons		public var drButton1:MovieClip;		public var drButton2:MovieClip;		public var drButton3:MovieClip;		public var drButton4:MovieClip;		public var drButton5:MovieClip;		public var drButton6:MovieClip;				//Scroll in and our var		public var scrollInOut:Boolean = true;				//Stage size height and width		private var _sizeH:Number;		private var _sizeW:Number;				//Video Connection Variables		public var mainVid:FLVPlayback = new FLVPlayback();		public var pers1Vid:FLVPlayback = new FLVPlayback();		public var persPlay:Boolean;				public function VideoEthnographer()		{			super();		}//End constructor				override public function loadPage():void		{			default xml namespace = "www.rapidintake.com/xmlgrammars/fc/sco";			trace("Jeff is like donkey kong");						//Add Event Listeners			bottomBar.addEventListener(MouseEvent.MOUSE_DOWN, scrollDownProjector);						//Establish Page Title Name			textPageName.text = currentPageTag.@title;						// Establish Doctors Names			drButton1.drName.text = currentPageTag.perspectives.perspective1.@name;			drButton2.drName.text = currentPageTag.perspectives.perspective2.@name;			drButton3.drName.text = currentPageTag.perspectives.perspective3.@name;			drButton4.drName.text = currentPageTag.perspectives.perspective4.@name;			drButton5.drName.text = currentPageTag.perspectives.perspective5.@name;			drButton6.drName.text = currentPageTag.perspectives.perspective6.@name;						// Load mainVideo			loadIntialVideo();						//Setting size height and width					}// End loadPage				override public function get videoPage():Boolean		{			return true;		}				override public function get mediaPlayer():*		{			return mainVid;		}				public function loadIntialVideo (e:Event = null):void{			//Setting Source of Video			mainVid.source = currentPageTag.@firstVid;						// Setting dimensions of video			mainVid.width = 640;			mainVid.height = 496;						// Centering main video in center of the stage			mainVid.x = settingsModel.settings.presentSizeW /2 - mainVid.width /2;			mainVid.y = settingsModel.settings.presentSizeH /2 - mainVid.height /2 + bottomBar.x + 10;			addChildAt(mainVid, 0);					}// End loadIntialVideo				public function scrollDownProjector(e:MouseEvent):void {						if(scrollInOut){				//Pause main video				mainVid.pause();				//Tween in Projecter				TweenLite.to(bottomBar, 1, {y:539, ease:Sine.easeIn});				TweenLite.to(projectorBack, 1, {y:30, ease:Sine.easeIn});								//Establish the path				pers1Vid.source = currentPageTag.perspectives.perspective1.@pers1Vid;							//Set dimensions				pers1Vid.width = 449.20;				pers1Vid.height = 224;				pers1Vid.x = 18.40;				pers1Vid.y = 39.20;				projectorBack.addChild(pers1Vid);				pers1Vid.play();								//Set pause true means pause is showing that it is playing				persPlay = true;								//play pause				playPause();								//Event Listeners to start and srop pers video				projectorBack.persPlayPause.addEventListener(MouseEvent.MOUSE_DOWN, playOrPause);								//Setting scroll out to false				scrollInOut = false;			} else if (!scrollInOut){				//Tween in Projecter				TweenLite.to(bottomBar, 1, {y:50, ease:Sine.easeIn});				TweenLite.to(projectorBack, 1, {y:-446, ease:Sine.easeIn});								//Set pause true means pause is showing that it is playing				persPlay = false;								//play pause				playPause();								//Start replay of mainVid				mainVid.play();								//Setting Scroll out back to true				scrollInOut = true;			}// End if statement					}// End scrollDownProjector				public function playPause(e:Event = null):void{			if (persPlay){				projectorBack.persPlayPause.gotoAndStop("persVidPause");			} else if (!persPlay){				projectorBack.persPlayPause.gotoAndStop("persVidPlay");			}// End if statement		}// end playPause				public function playOrPause (e:MouseEvent):void{			if(persPlay){				pers1Vid.pause();				playPause();			} else if (!persPlay){				pers1Vid.play();				playPause();			}// End if statement		}// end playOrPause			}// End Class}// End Package